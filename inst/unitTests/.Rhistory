#' @param limit It controls how many variants will be queried and returned for a large region. It can be a number (1000 by default) or "all".
#' Please note that large number or "all" may get yourself hurt because you could get timeout or may even crash the server.
#' @param timeout A \code{timeout} parameter for \code{httr::GET}.
#' Default: 100
#' @return a data frame (table)
#' @examples
#' data <- regulomeSummary(c("rs4791078","rs10048158"))
#' head(data)
#' @rdname haploR-regulomeSummary
#' @export
regulomeSummary <- function(query=NULL,
url="https://www.regulomedb.org/regulome-summary/",
genomeAssembly = NULL,
timeout=100,
verbose=FALSE) {
if(is.null(genomeAssembly)) {
genomeAssembly <- "GRCh37"
}
tryCatch({
# Querying
qr <- paste(url, "/?regions=", paste(query, collapse = '%0A'), "&genome=", genomeAssembly, "&format=json", sep="")
r <- GET(qr, timeout=timeout)
# Extracting content
raw <- content(r, "text")
json_content <- fromJSON(raw)
out <- lapply(json_content$summaries, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
out <- as.data.frame(do.call("rbind", out))
}, error=function(e) {
print(e)
})
return(res.table=as_tibble(out))
}
library(httr)
library(tibble)
library(RJSONIO)
regulomeSummary(c("rs4791078","rs10048158"))
regulomeSummary(c("rs4791078"))
regulomeSummary(c("rs10048158"))
#' @param limit It controls how many variants will be queried and returned for a large region. It can be a number (1000 by default) or "all".
#' Please note that large number or "all" may get yourself hurt because you could get timeout or may even crash the server.
#' @param timeout A \code{timeout} parameter for \code{httr::GET}.
#' Default: 100
#' @return a data frame (table)
#' @examples
#' data <- regulomeSummary(c("rs4791078","rs10048158"))
#' head(data)
#' @rdname haploR-regulomeSummary
#' @export
regulomeSummary <- function(query=NULL,
url="https://www.regulomedb.org/regulome-summary/",
genomeAssembly = NULL,
timeout=100,
verbose=FALSE) {
if(is.null(genomeAssembly)) {
genomeAssembly <- "GRCh37"
}
tryCatch({
# Querying
qr <- paste(url, "/?regions=", paste(query, collapse = '%0A'), "&genome=", genomeAssembly, "&format=json", sep="")
print(qr)
r <- GET(qr, timeout=timeout)
# Extracting content
raw <- content(r, "text")
json_content <- fromJSON(raw)
out <- lapply(json_content$summaries, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
out <- as.data.frame(do.call("rbind", out))
}, error=function(e) {
print(e)
})
return(res.table=as_tibble(out))
}
regulomeSummary(c("rs10048158"))
regulomeSummary(c("rs4791078","rs10048158"))
#' @param limit It controls how many variants will be queried and returned for a large region. It can be a number (1000 by default) or "all".
#' Please note that large number or "all" may get yourself hurt because you could get timeout or may even crash the server.
#' @param timeout A \code{timeout} parameter for \code{httr::GET}.
#' Default: 100
#' @return a data frame (table)
#' @examples
#' data <- regulomeSummary(c("rs4791078","rs10048158"))
#' head(data)
#' @rdname haploR-regulomeSummary
#' @export
regulomeSummary <- function(query=NULL,
url="https://www.regulomedb.org/regulome-summary/",
genomeAssembly = NULL,
timeout=100,
verbose=FALSE) {
if(is.null(genomeAssembly)) {
genomeAssembly <- "GRCh37"
}
tryCatch({
# Querying
qr <- paste(url, "/?regions=", paste(query, collapse = '%0A'), "&genome=", genomeAssembly, "&format=json", sep="")
print(qr)
r <- GET(qr, timeout=timeout)
# Extracting content
raw <- content(r, "text")
json_content <- fromJSON(raw)
out <- lapply(json_content$summaries, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
out <- as.data.frame(do.call("rbind", out))
}, error=function(e) {
print(e)
})
return(res.table=as_tibble(out))
}
regulomeSummary(c("rs4791078","rs10048158"))
library(devtools)
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
devtools::document("/Users/iz12/Projects/haploR")
